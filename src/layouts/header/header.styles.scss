@import "../../assets/sass/variables";
@import "../../assets/sass/mixins";


.header {
    height: 85vh;
    background-image: linear-gradient(to right bottom,
                        rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.8)),
                        url("../../assets/images/hero-small.jpg") ;

    @media (min-resolution: 192dpi) and (min-width: 37.5em),
       (-webkit-min-device-pixel-ratio: 2) and (min-width: 37.5em), //for safari
       (min-width: 125em){ //for higher resolutions expect for smaller screens // comma is like or: conditional statement
            background-image: linear-gradient(to right bottom,
                                rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.8)),
                                url("../../assets/images/hero-small.jpg") ;
    }

    //@media (min-width: 2000px) {
    //    background-image: linear-gradient(to right bottom,
    //            rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.8)),
    //    url("../../assets/images/hero.jpg") ;
    //}

    background-size: cover;
    background-position: top; /* to make top stays the same as the width change in the browser */

    @supports (clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)) {
        height: 95vh;
        -webkit-clip-path: polygon(0 0,100% 0, 100% 75vh, 0 100%);
        clip-path: polygon(0 0,100% 0, 100% 75vh, 0 100%); /*(topLeft, topRight, bottomRight, bottomLeft) coordinates// first value is in x direction*/
        /*for advanced clip-paths https://bennettfeely.com/clippy/ */
}

    @include respond(phone) {
        -webkit-clip-path: polygon(0 0,100% 0, 100% 85vh, 0 100%);
        clip-path: polygon(0 0,100% 0, 100% 85vh, 0 100%);
        height: 95vh;
    }

    position: relative; /* important*/

    &__logo-box {
        position: absolute;
        top: 4rem;
        left: 4rem; /* these only works if we specify position: absolute and position: relative to the parent element */

        .header__logo {
            height: 3.5rem;
        }
    }

    &__text-box {
        position: absolute;
        top: 40%; /*centering the element */
        left: 50%;/*centering the element */
        transform: translate(-50%,-50%); /* left starts measuring from left most part of the element and top does the same, so, we compensate by subtracting back */
    }

    .heading-primary {
        color: $color-white;
        text-transform: uppercase;
        margin-bottom: 6rem;

        backface-visibility: hidden; //to hide minor shake

        @include respond(phone) {
            margin-top: 4rem;
        }

        &--main {
            display: block; /*occupies entire width*/
            font-size: 6rem;
            font-weight: 400;
            letter-spacing: 3.5rem;

            @include respond(tab-port) {
                letter-spacing: 2rem;
            }
            @include respond(phone) {
                letter-spacing: .8rem;
                font-size: 4.5rem;
            }
            animation-name: moveInLeft;
            animation-duration: 1s;
            animation-timing-function: ease-out; /*faster in the beginning slowing at the end */
            /*
            animation-iteration-count: 2;
            animation-delay: 2s;
            */
        }

        &--sub {
            display: block;
            font-size: 2rem;
            font-weight: 700;
            letter-spacing: 1.74rem;

            @include respond(tab-port) {
                letter-spacing: 1.2rem;
            }
            @include respond(phone) {
                letter-spacing: .5rem;
                font-size: 1.5rem;
                font-weight: 500;
            }
            animation: moveInRight 1s ease-out;
        }
    }
}

@keyframes moveInLeft {
    0% { /*beginning of animation */
        opacity: 0;
        transform: translateX(-10rem); /*negative value means the element goes to l.h.s */
    }
    80% {
        transform: translateX(1rem);
    }
    100% { /*ending of animation */
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% { /*beginning of animation */
        opacity: 0;
        transform: translateX(10rem); /*negative value means the element goes to l.h.s */
    }
    80% {
        transform: translateX(-1rem);
    }
    100% { /*ending of animation */
        opacity: 1;
        transform: translate(0);
    }
}